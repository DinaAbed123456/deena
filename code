#include <iostream>
#include <pthread.h>
#include <cmath>
#include <chrono>

const int N = 100000000;
int total_primes = 0;
pthread_mutex_t mutex;

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6)
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
    return true;
}

struct ThreadArgs {
    int start;
    int end;
};

void* count_primes(void* arg) {
    ThreadArgs* args = (ThreadArgs*)arg;
    int local_count = 0;
    for (int i = args->start; i <= args->end; ++i) {
        if (is_prime(i)) {
            local_count++;
        }
    }

    pthread_mutex_lock(&mutex);
    total_primes += local_count;
    pthread_mutex_unlock(&mutex);

    return NULL;
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cout << "Usage: ./prime_pthreads <num_threads>\n";
        return 1;
    }

    int num_threads = std::stoi(argv[1]);
    pthread_t threads[num_threads];
    ThreadArgs args[num_threads];
    int chunk = N / num_threads;

    pthread_mutex_init(&mutex, NULL);

    auto start_time = std::chrono::high_resolution_clock::now();

    for (int i = 0; i < num_threads; ++i) {
        args[i].start = i * chunk + 1;
        args[i].end = (i == num_threads - 1) ? N : (i + 1) * chunk;
        pthread_create(&threads[i], NULL, count_primes, &args[i]);
    }

    for (int i = 0; i < num_threads; ++i)
        pthread_join(threads[i], NULL);

    auto end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end_time - start_time;

    std::cout << "Total prime numbers up to " << N << ": " << total_primes << std::endl;
    std::cout << "Execution time with " << num_threads << " threads: " << duration.count() << " seconds\n";

    pthread_mutex_destroy(&mutex);
    return 0;
}
